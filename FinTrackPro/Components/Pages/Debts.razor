@page "/debts"
@using FinTrackPro.Models
@using FinTrackPro.Services
@using FinTrackPro.Services.Interface
@inject IUserService UserService
@inject DebtService DebtService
@inject NavigationManager NavigationManager
@inject UserService UserService

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<style>
    body {
    font-family: Arial, sans-serif;
    margin: 0;
    display: flex;
    background-color: #f4f4f4;
    }

    .sidebar {
    width: 230px;
    background-color: #B2C6B6;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    padding: 40px 20px;
    box-sizing: border-box;
    }

    .logo {
    object-fit: contain;
    }

    .sidebar a {
    display: block;
    color: Black;
    text-decoration: none;
    margin: 30px 0;
    text-align: left;
    font-size: 22px;
    transition: background-color 0.3s ease;
    padding: 10px;
    }

    .sidebar a:hover {
    background-color: #a6944b;
    border-radius: 5px;
    }

    .sidebar .logo {
    width: 100px;
    height: 100px;
    margin: 0 auto 20px;
    display: flex;
    overflow: hidden;
    border-radius: 50%;
    }

    .sidebar .logo img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 50%;
    }

    .sidebar a i {
    margin-right: 10px;
    font-size: 24px;
    }

    .main {
    margin-left: 240px;
    padding: 20px;
    width: calc(100% - 240px);
    box-sizing: border-box;
    }

    .debt-transactions h3 {
    margin-bottom: 20px;
    }

    .debt-transactions table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    }

    .debt-transactions th,
    .debt-transactions td {
    padding: 12px 20px;
    text-align: left;
    border: 1px solid #ddd;
    }

    .debt-transactions th {
    background-color: #E8ECD6;
    color: Black;
    }

    .debt-transactions td {
    background-color: #f4f4f4;
    }

    .debt-transactions .pay-button {
    background-color: #B75B48;
    color: white;
    padding: 5px 10px;
    border: none;
    cursor: pointer;
    }

    .debt-transactions .pay-button:hover {
    background-color: #ADD8E6;
    }

    .add-debt-btn {
    background-color: #000000;
    color: white;
    padding: 10px 20px;
    border: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
    margin-top: 20px;
    display: block;
    margin-left: auto;
    margin-right: auto;
    }

    .add-debt-btn:hover {
    background-color: #ADD8E6;
    }

    .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
    justify-content: center;
    align-items: center;
    }

    .modal.show {
    display: flex; /* Show modal when the 'show' class is applied */
    }

    .modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 400px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .modal input,
    .modal select {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    margin-top: 5px;
    border: 1px solid #ddd;
    border-radius: 5px;
    }

    .modal .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    }

    .modal .close:hover,
    .modal .close:focus {
    color: #EF6B6E;
    text-decoration: none;
    cursor: pointer;
    }

    .filter-section {
    margin-bottom: 20px;
    display: flex;
    gap: 10px;
    }

    .filter-section input,
    .filter-section select {
    padding: 8px;
    margin-right: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    }

    .filter-section button {
    padding: 8px 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    }

    .filter-section button:hover {
    background-color: #45a049;
    }

    .sort-button {
    padding: 8px 16px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    margin-left: 20px;
    }

    .sort-button:hover {
    background-color: #0056b3;
    }
</style>

<body>
    @code {
        private List<DebtModel> debts;
        private List<DebtModel> filteredDebts;
        private DebtModel newDebt = new DebtModel();
        private bool isAddDebtPopupVisible = false;
        private int currentBalance;
        private string errorMessage = string.Empty;

        // Filters
        private string labelFilter = string.Empty;
        private string payeeFilter = string.Empty;
        private DateTime? dateFilter;
        private string tagFilter = string.Empty;

        // Sorting flag
        private bool isSortedAsc = true;
        public string currency;
        protected override void OnInitialized()
        {
            currency = UserService.getCurrency();
            currentBalance = UserService.GetUserBalance();
            debts = DebtService.GetDebtsByStatus("Pending"); // Fetch only debts that are Pending
            filteredDebts = debts ?? new List<DebtModel>();
        }
        private void AddDebt()
        {
            DebtService.AddNewDebt(newDebt);
            currentBalance =currentBalance+newDebt.Amount;
            UserService.UpdateUserBalance(currentBalance);
            debts = DebtService.GetDebtsByStatus("Pending");
            filteredDebts = debts;
            isAddDebtPopupVisible = false;
        }
        private void ShowAddDebtPopup()
        {
            newDebt = new DebtModel { Status = "Pending" }; // Set status to Pending by default
            isAddDebtPopupVisible = true;
        }
        private void HideAddDebtPopup()
        {
            isAddDebtPopupVisible = false;
        }

        private void DeleteDebt(Guid debtId, int amount)
        {
            if (currentBalance >= amount)
            {
                currentBalance -= amount;
                UserService.UpdateUserBalance(currentBalance);

                DebtService.UpdateDebtStatus(debtId, "Paid");
                debts = DebtService.GetDebtsByStatus("Pending");
                filteredDebts = debts;
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Insufficient funds to complete the debt payment.";
            }
        }

        private void ApplyFilters()
        {
            filteredDebts = debts.Where(debt =>
            (string.IsNullOrEmpty(labelFilter) || debt.Label.Contains(labelFilter, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(payeeFilter) || debt.Payee.Contains(payeeFilter, StringComparison.OrdinalIgnoreCase)) &&
            (!dateFilter.HasValue || debt.DueDate == dateFilter.Value.Date) &&
            (string.IsNullOrEmpty(tagFilter) || debt.Tag.Contains(tagFilter, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }

        private void ToggleSortByDate()
        {
            if (isSortedAsc)
            {
                filteredDebts = filteredDebts.OrderByDescending(debt => debt.DueDate).ToList();
            }
            else
            {
                filteredDebts = filteredDebts.OrderBy(debt => debt.DueDate).ToList();
            }

            // Toggle sorting flag
            isSortedAsc = !isSortedAsc;
        }
    }

    <div class="sidebar">
        <div class="logo">
            <img src="Images/fintrackpro-high-resolution-logo.png" alt="Logo" />
        </div>
        <a href="/home"><i class="fas fa-home"></i>Home</a>
        <a href="/transaction"><i class="fas fa-credit-card"></i>Transactions</a>
        <a href="/debts"><i class="fas fa-clipboard-list"></i>Debts</a>
        <a href="/dashboard"><i class="fas fa-dashboard"></i>DashBoard</a>
        <a href="/"><i class="fas fa-sign-out-alt"></i>Log Out</a>
    </div>

    <div class="main">
        <div class="filter-section">
            <input type="text" placeholder="Label" @bind="labelFilter" @bind:event="oninput" />
            <input type="text" placeholder="Payee" @bind="payeeFilter" @bind:event="oninput" />
            <input type="date" @bind="dateFilter" />
            <select @bind="tagFilter">
                <option value="">Tag</option>
                <option value="Vehicle">Vehicle</option>
                <option value="Person">Person</option>
                <option value="Utility">Utility</option>
            </select>
            <button @onclick="ApplyFilters">Apply Filters</button>
            <button class="sort-button" @onclick="ToggleSortByDate">
                Sort by Date 
            </button>
        </div>

        <div class="debt-transactions">
            <h3>Debt Transactions</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="color: red;">@errorMessage</div>
            }

            <table>
                <thead>
                    <tr>
                        <th>Label</th>
                        <th>Payee</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Tag</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in filteredDebts)
                    {
                        <tr>
                            <td>@debt.Label</td>
                            <td>@debt.Payee</td>
                            <td>@currency@debt.Amount</td>
                            <td>@debt.DueDate</td>
                            <td>@debt.Status</td>
                            <td>@debt.Tag</td>
                            <td>
                                @if (debt.Status == "Pending")
                                {
                                    <button class="pay-button" @onclick="(() => DeleteDebt(debt.Id, debt.Amount))">Pay</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <button class="add-debt-btn" @onclick="ShowAddDebtPopup">Add Debt</button>
        </div>
    </div>

    <div class="modal @(isAddDebtPopupVisible ? "show" : "")">
        <div class="modal-content">
            <span class="close" @onclick="HideAddDebtPopup">&times;</span>
            <h2>Add Debt</h2>
            <input type="text" placeholder="Label" @bind="newDebt.Label" />
            <input type="text" placeholder="Payee" @bind="newDebt.Payee" />
            <input type="number" placeholder="Amount" @bind="newDebt.Amount" />
            <input type="date" @bind="newDebt.DueDate" />
            <select @bind="newDebt.Tag">
                <option value="Vehicle">Vehicle</option>
                <option value="Person">Person</option>
                <option value="Utility">Utility</option>
            </select>
            <button class="add-debt-btn" @onclick="AddDebt">Add Debt</button>
        </div>
    </div>
</body>
